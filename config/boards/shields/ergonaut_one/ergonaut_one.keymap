#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>

#define ENG 0
#define ENN 1
#define RUS 2
#define RUN 3
#define NUM 4
#define FUN 5
#define MED 6
#define MOS 7

&lt { 
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <150>; 
};
&mt { 
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <150>; 
};
&mmv {
    time-to-max-speed-ms = <500>;
};

/ {
        behaviors {
            collp: colemak_lpar {
                compatible = "zmk,behavior-mod-morph";
                label = "COLEMAK_LEFT_PARENTHESIS";
                #binding-cells = <0>;
                bindings = <&kp LPAR>, <&kp SEMI>;
                mods = <(MOD_RSFT)>;
            };
            colrp: colemak_rpar {
                compatible = "zmk,behavior-mod-morph";
                label = "COLEMAK_RIGHT_PARENTHESIS";
                #binding-cells = <0>;
                bindings = <&kp RPAR>, <&kp COLON>;
                mods = <(MOD_LSFT)>;
            };
            dsoft: diktor_soft {
                compatible = "zmk,behavior-mod-morph";
                label = "DIKTOR_SOFT_HARD_SIGN";
                #binding-cells = <0>;
                bindings = <&kp M>, <&kp RBKT>;
                mods = <(MOD_RSFT)>;
            };
            dbsoft: diktor_big_soft {
                compatible = "zmk,behavior-mod-morph";
                label = "DIKTOR_BIG_SOFT_HARD_SIGN";
                #binding-cells = <0>;
                bindings = <&kp RS(M)>, <&kp RBRC>;
                mods = <(MOD_RSFT)>;
            };
            dcomma: diktor_comma {
                compatible = "zmk,behavior-mod-morph";
                label = "DIKTOR_COMMA_QUESTION_MARK";
                #binding-cells = <0>;
                bindings = <&kp QMARK>, <&kp AMPS>;
                mods = <(MOD_RSFT)>;
            };
            ddot: diktor_dot {
                compatible = "zmk,behavior-mod-morph";
                label = "DIKTOR_DOT_EXCLAMATION_MARK";
                #binding-cells = <0>;
                bindings = <&kp SLASH>, <&kp EXCL>;
                mods = <(MOD_RSFT)>;
            };
            // Ctrl-<И> to Ctrl-R
            dikb: diktor_b {
                compatible = "zmk,behavior-mod-morph";
                label = "DIKTOR_COL_MODS_FOR_B";
                #binding-cells = <0>;
                bindings = <&kp B>, <&kp R>;
                mods = <(MOD_RCTL)>;
                keep-mods = <(MOD_RCTL)>;
            };
            mtdb: mod_tap_dikb {
                compatible = "zmk,behavior-hold-tap";
                label = "MOD_TAP_DIKTOR_B";
                #binding-cells = <2>;
                bindings = <&kp>, <&dikb>;
                flavor = "balanced";
                tapping-term-ms = <200>;
            };
            // Ctrl-<Е> to Ctrl-S
            dikt: diktor_t {
                compatible = "zmk,behavior-mod-morph";
                label = "DIKTOR_COL_MODS_FOR_T";
                #binding-cells = <0>;
                bindings = <&kp T>, <&kp S>;
                mods = <(MOD_RCTL)>;
                keep-mods = <(MOD_RCTL)>;
            };
            mtdt: mod_tap_dikt {
                compatible = "zmk,behavior-hold-tap";
                label = "MOD_TAP_DIKTOR_T";
                #binding-cells = <2>;
                bindings = <&kp>, <&dikt>;
                flavor = "balanced";
                tapping-term-ms = <200>;
            };
            // Ctrl-<Э> to Ctrl-X
            dikapos: diktor_apos {
                compatible = "zmk,behavior-mod-morph";
                label = "DIKTOR_COL_MODS_FOR_APOS";
                #binding-cells = <0>;
                bindings = <&kp APOS>, <&kp X>;
                mods = <(MOD_RCTL)>;
                keep-mods = <(MOD_RCTL)>;
            };
            // Ctrl-<Х> to Ctrl-C
            diklbkt: diktor_lbkt {
                compatible = "zmk,behavior-mod-morph";
                label = "DIKTOR_COL_MODS_FOR_LBKT";
                #binding-cells = <0>;
                bindings = <&kp LBKT>, <&kp C>;
                mods = <(MOD_RCTL)>;
                keep-mods = <(MOD_RCTL)>;
            };
            // Ctrl-<Ю> to Ctrl-V
            dikdot: diktor_dot_oo {
                compatible = "zmk,behavior-mod-morph";
                label = "DIKTOR_COL_MODS_FOR_DOT";
                #binding-cells = <0>;
                bindings = <&kp DOT>, <&kp V>;
                mods = <(MOD_RCTL)>;
                keep-mods = <(MOD_RCTL)>;
            };
            // Ctrl-<Ф> to Ctrl-Z
            dika: diktor_a {
                compatible = "zmk,behavior-mod-morph";
                label = "DIKTOR_COL_MODS_FOR_A";
                #binding-cells = <0>;
                bindings = <&kp A>, <&kp Z>;
                mods = <(MOD_RCTL)>;
                keep-mods = <(MOD_RCTL)>;
            };
            // (Alt|Ctrl)-<Я> to (Alt|Ctrl)-F
            dikz: diktor_z {
                compatible = "zmk,behavior-mod-morph";
                label = "DIKTOR_COL_MODS_FOR_Z";
                #binding-cells = <0>;
                bindings = <&kp Z>, <&kp F>;
                mods = <(MOD_RALT|MOD_RCTL)>;
                keep-mods = <(MOD_RALT|MOD_RCTL)>;
            };
            // Numeric . or ,
            numdorc: numeric_dot_or_comma {
                compatible = "zmk,behavior-mod-morph";
                label = "NUMERIC_DOT_OR_COMMA";
                #binding-cells = <0>;
                bindings = <&kp DOT>, <&kp COMMA>;
                mods = <(MOD_RSFT)>;
            };
        };

        macros {
            ZMK_MACRO(to_russian,
                wait-ms = <20>;
                tap-ms = <20>;
                bindings = <&macro_tap &kp LC(LA(N2))>, <&macro_tap &tog RUS>;
            )
            ZMK_MACRO(to_english,
                wait-ms = <20>;
                tap-ms = <20>;
                bindings = <&macro_tap &kp LC(LA(N1))>, <&macro_tap &tog RUS>;
            )
        };
        
        combos {
            compatible = "zmk,combos";
            combo_rus {
                timeout-ms = <50>;
                key-positions = <5 6>;
                layers = <ENG>;
                bindings = <&to_russian>;
                require-prior-idle-ms = <300>;
            };
            combo_eng {
                timeout-ms = <50>;
                key-positions = <5 6>;
                layers = <RUS>;
                bindings = <&to_english>;
                require-prior-idle-ms = <300>;
            };
            combo_rus2 {
                timeout-ms = <50>;
                key-positions = <38 39>;
                layers = <ENG>;
                bindings = <&to_russian>;
                require-prior-idle-ms = <300>;
            };
            combo_eng2 {
                timeout-ms = <50>;
                key-positions = <38 39>;
                layers = <RUS>;
                bindings = <&to_english>;
                require-prior-idle-ms = <300>;
            };
        };

        keymap {
                compatible = "zmk,keymap";

                english_layer {
// ╭───────┬───────┬───────┬───────┬───────┬───────╮     ╭───────┬───────┬───────┬───────┬───────┬───────╮
// |   [   |   Q   |   W   |   F   |   P   |   B   |     |   J   |   L   |   U   |   Y   |   "   |   ]   |
// |  (/;  |   A   |   R   |   S   |   T   |   G   |     |   M   |   N   |   E   |   I   |   O   |  )/:  |
// |   `   |   Z   |   X   |   C   |   D   |   V   |     |   K   |   H   |   ,   |   .   |   /   |   \   |
// ╰───────┴───────┴───────┼───────┼───────┼───────┤     ├───────┼───────┼───────┼───────────────────────╯
//                         |  MED  |  BKSP |  RET  |     |  TAB  | SPACE |  MED  |
//                         ╰───────┴───────┴───────╯     ╰───────┴───────┴───────╯
                        bindings = <
          &kp LBKT  &kp Q         &kp W         &kp F         &kp P             &kp B         &kp J         &kp L            &kp U         &kp Y        &kp SQT       &kp RBKT       
          &collp    &mt LGUI A    &mt LALT R    &mt LSHFT S   &mt LCTRL T       &kp G         &kp M         &mt RCTRL N      &mt RSHFT E   &mt RALT I   &mt RGUI O    &colrp
          &kp GRAVE &kp Z         &kp X         &kp C         &kp D             &kp V         &kp K         &kp H            &kp COMMA     &kp DOT      &kp FSLH      &kp BSLH
                                            &mo MED   &lt ENN BSPC   &lt MOS RET   &lt FUN TAB   &lt NUM SPACE   &mo MED
                        >;
                };
                english_nav_layer {
// ╭───────┬───────┬───────┬───────┬───────┬───────╮     ╭───────┬───────┬───────┬───────┬───────┬───────╮
// |       |  ESC  | CAPS  |  RUS  |       |       |     | PG_UP | HOME  |  UP   |  END  |  INS  |       |
// |       |  LGUI | LALT  | LSHFT | LCTRL |       |     | PG_DN | LEFT  | DOWN  | RIGHT |  DEL  |       |
// |       |       |       |       |       |       |     |       |       | MENU  |       |       |       |
// ╰───────┴───────┴───────┼───────┼───────┼───────┤     ├───────┼───────┼───────┼───────────────────────╯
//                         |       |       |       |     |  TAB  | SPACE |       |
//                         ╰───────┴───────┴───────╯     ╰───────┴───────┴───────╯
                        bindings = <
          &none     &kp ESC       &kp CAPS      &to_russian   &tog RUS          &none         &kp PG_UP     &kp HOME         &kp UP        &kp END      &kp INS       &none
          &none     &kp LGUI      &kp LALT      &kp LSHFT     &kp LCTRL         &none         &kp PG_DN     &kp LEFT         &kp DOWN      &kp RIGHT    &kp DEL       &none
          &none     &none         &none         &none         &none             &none         &none         &none            &kp K_CMENU   &none        &none         &none
                                            &none     &none          &none         &kp TAB       &kp SPACE       &none
                        >;
                };
                russian_layer {
// ╭───────┬───────┬───────┬───────┬───────┬───────╮     ╭───────┬───────┬───────┬───────┬───────┬───────╮
// |   Ё   |   Ц   |  ь/ъ  |   Я   |  ,/?  |  ./!  |     |   З   |   В   |   К   |   Д   |   Ч   |   Ш   |
// |  Ь/Ъ  |   У   |   И   |   Е   |   О   |   А   |     |   Л   |   Н   |   Т   |   С   |   Р   |   Й   |
// |   \   |   Ф   |   Э   |   Х   |   Ы   |   Ю   |     |   Б   |   М   |   П   |   Г   |   Ж   |   Щ   |
// ╰───────┴───────┴───────┼───────┼───────┼───────┤     ├───────┼───────┼───────┼───────────────────────╯
//                         |  MED  |  BKSP |  RET  |     |  TAB  | SPACE |  MED  |
//                         ╰───────┴───────┴───────╯     ╰───────┴───────┴───────╯
                        bindings = <
          &kp GRAVE &kp W         &dsoft        &dikz         &dcomma           &ddot         &kp P         &kp D            &kp R         &kp L        &kp X         &kp I       
          &dbsoft   &mt LGUI E    &mtdb LALT B  &mtdt LSHFT T &mt LCTRL J       &kp F         &kp K         &mt RCTRL Y      &mt RSHFT N   &mt RALT C   &mt RGUI H    &kp Q
          &kp BSLH  &dika         &dikapos      &diklbkt      &kp S             &dikdot       &kp COMMA     &kp V            &kp G         &kp U        &kp SEMI      &kp O
                                            &mo MED   &lt RUN BSPC   &lt MOS RET   &lt FUN TAB   &lt NUM SPACE   &mo MED
                        >;
                };
                russian_nav_layer {
// ╭───────┬───────┬───────┬───────┬───────┬───────╮     ╭───────┬───────┬───────┬───────┬───────┬───────╮
// |       |  ESC  | CAPS  |  ENG  |       |       |     | PG_UP | HOME  |  UP   |  END  |  INS  |       |
// |       |  LGUI | LALT  | LSHFT | LCTRL |       |     | PG_DN | LEFT  | DOWN  | RIGHT |  DEL  |       |
// |       |       |       |       |       |       |     |       |       | MENU  |       |       |       |
// ╰───────┴───────┴───────┼───────┼───────┼───────┤     ├───────┼───────┼───────┼───────────────────────╯
//                         |       |       |       |     |  TAB  | SPACE |       |
//                         ╰───────┴───────┴───────╯     ╰───────┴───────┴───────╯
                        bindings = <
          &none     &kp ESC       &kp CAPS      &to_english   &tog RUS          &none         &kp PG_UP     &kp HOME         &kp UP        &kp END      &kp INS       &none
          &none     &kp LGUI      &kp LALT      &kp LSHFT     &kp LCTRL         &none         &kp PG_DN     &kp LEFT         &kp DOWN      &kp RIGHT    &kp DEL       &none
          &none     &none         &none         &none         &none             &none         &none         &none            &kp K_CMENU   &none        &none         &none
                                            &none     &none          &none         &kp TAB       &kp SPACE       &none
                        >;
                };
                number_layer {
// ╭───────┬───────┬───────┬───────┬───────┬───────╮     ╭───────┬───────┬───────┬───────┬───────┬───────╮
// |       |   [   |   7   |   8   |   9   |   ]   |     |       |       |       |       |  ESC  |       |
// |       |   ;   |   4   |   5   |   6   |   =   |     |  BKSP | RCTRL | RSHFT |  RALT |  RGUI |       |
// |       |   `   |   1   |   2   |   3   |   \   |     |       |       |       |       |       |       |
// ╰───────┴───────┴───────┼───────┼───────┼───────┤     ├───────┼───────┼───────┼───────────────────────╯
//                         |  ./,  |   0   |   -   |     |       |       |       |
//                         ╰───────┴───────┴───────╯     ╰───────┴───────┴───────╯
                        bindings = <
          &none     &kp LBKT      &kp N7        &kp N8        &kp N9            &kp RBKT      &none         &none             &none         &none      &kp ESC        &none           
          &none     &kp SEMI      &kp N4        &kp N5        &kp N6            &kp EQUAL     &kp BSPC      &kp RCTRL         &kp RSHFT     &kp RALT   &kp RGUI       &none
          &none     &kp GRAVE     &kp N1        &kp N2        &kp N3            &kp BSLH      &none         &none             &none         &none      &none          &none
                                            &numdorc  &kp N0         &kp MINUS    &none         &none           &none
                        >;
                };

                function_layer {
// ╭───────┬───────┬───────┬───────┬───────┬───────╮     ╭───────┬───────┬───────┬───────┬───────┬───────╮
// |       |  F12  |  F7   |  F8   |  F9   | PSCRN |     |       |       |       |       |  ESC  |       |
// |       |  F11  |  F4   |  F5   |  F6   | SLCK  |     |       | RCTRL | RSHFT |  RALT |  RGUI |       |
// |       |  F10  |  F1   |  F2   |  F3   | PAUSE |     |       |       |       |       |       |       |
// ╰───────┴───────┴───────┼───────┼───────┼───────┤     ├───────┼───────┼───────┼───────────────────────╯
//                         |       |  BKSP |  RET  |     |       |       |       |
//                         ╰───────┴───────┴───────╯     ╰───────┴───────┴───────╯
                        bindings = <
          &none     &kp F12       &kp F7        &kp F8        &kp F9            &kp PSCRN       &none       &none             &none         &none       &kp ESC        &none   
          &none     &kp F11       &kp F4        &kp F5        &kp F6            &kp SLCK        &none       &kp RCTRL         &kp RSHFT     &kp RALT    &kp RGUI       &none
          &none     &kp F10       &kp F1        &kp F2        &kp F3            &kp PAUSE_BREAK &none       &none             &none         &none       &none          &none
                                            &none      &kp BSPC      &kp RET      &none         &none           &none
                        >;
                };
                media_layer {
// ╭───────┬───────┬───────┬───────┬───────┬───────╮     ╭───────┬───────┬───────┬───────┬───────┬───────╮
// | BOOTL |       |       |       |       |       |     | STOP  |  P/P  | VOL+  |       |       | BOOTL |
// | BTCLR |  BT0  |  BT1  |  BT2  |  BT3  |  BT4  |     |       |   <<  | VOL-  |  >>   |       |       |
// | RESET |       |       |       |       |       |     |       |       | MUTE  |       |       | RESET |
// ╰───────┴───────┴───────┼───────┼───────┼───────┤     ├───────┼───────┼───────┼───────────────────────╯
//                         |       |       |       |     |       |       |       |
//                         ╰───────┴───────┴───────╯     ╰───────┴───────┴───────╯
                        bindings = <
          &bootloader   &none          &none          &none          &none          &none          &kp C_STOP     &kp C_PP       &kp C_VOL_UP   &none          &none          &bootloader
          &bt BT_CLR    &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4   &none          &kp C_PREV     &kp C_VOL_DN   &kp C_NEXT     &none          &none
          &sys_reset    &none          &none          &none          &none          &none          &none          &none          &kp C_MUTE     &none          &none          &sys_reset
                                             &none         &none          &none         &none          &none         &none
                        >;
                };
                mouse_layer {
// ╭───────┬───────┬───────┬───────┬───────┬───────╮     ╭───────┬───────┬───────┬───────┬───────┬───────╮
// |       |  ESC  |       |       |       |       |     | SC_UP | SC_LT | MV_UP | SC_RT |       |       |
// |       |  LGUI |  LALT | LSHFT | LCTRL |       |     | SC_DN | MV_LT | MV_DN | MV_RT |       |       |
// |       |       |       |       |       |       |     |       |       |       |       |       |       |
// ╰───────┴───────┴───────┼───────┼───────┼───────┤     ├───────┼───────┼───────┼───────────────────────╯
//                         |       |       |       |     |  RCLK |  LCLK |       |
//                         ╰───────┴───────┴───────╯     ╰───────┴───────┴───────╯
                        bindings = <
          &none         &kp ESC        &none          &none          &none          &none          &msc SCRL_UP     &msc SCRL_LEFT   &mmv MOVE_UP   &msc SCRL_RIGHT   &none          &none
          &none         &kp LGUI       &kp LALT       &kp LSHFT      &kp LCTRL      &none          &msc SCRL_DOWN   &mmv MOVE_LEFT   &mmv MOVE_DOWN &mmv MOVE_RIGHT   &none          &none
          &none         &none          &none          &none          &none          &none          &none            &none            &none          &none             &none          &none
                                             &none         &none          &none         &mkp RCLK      &mkp LCLK     &none
                        >;
                };
        };
};
